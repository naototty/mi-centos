#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

CUR_TIME=`date +%FT%TZ`
CUSTOM_RPMS=./RPMS
DVD_LAYOUT=/export/var/setup/ISO/centos-67-iso-layout
VERSION="6.7"
DVD_TITLE="CentOS ${VERSION} GMO Internet"
ISO=CentOS-${VERSION}-x86_64-bin-DVD1.iso
##ISO_DIR=/export/var/setup/ISO/fetched-iso
ISO_DIR=/var/www/html/repos.myvps.jp/pub/Linux/centos/6.7/isos/x86_64
##ISO_FILENAME=./centos-6-joyent.iso
ISO_FILENAME=./centos-67-gmo.iso
KS_CFG=./ks.cfg
KS_RESCUE_CFG=./ks-rescue.cfg
KS_BASE_CFG=/etc/cobbler/ux-nexsus-10g-ibm-x3550m5_kvm-ce64-64-isoboot.ks
KS_RESCUE_BASE_CFG=/export/var/setup/ISO/isolinux-ce67-64/ks/ks-rescue.cfg
GUESTTOOLS=sdc-vmtools
##MIRROR=http://mirrors.gigenet.com/centos/${VERSION}/isos/x86_64
MIRROR=https://repos.app-sys.jp/pub/Linux/centos/${VERSION}/isos/x86_64
MOUNT_POINT=/mnt/centos6

CSV_FILE=/export/var/setup/iso-setup-vn2c-csv.txt
UNIT_INFO_FILE=/export/var/setup/iso-setup-unit-info.txt


function fetch_iso() {
    echo "Finding $ISO in $ISO_DIR"
    if [ ! -d $ISO_DIR ]; then
        mkdir -p $ISO_DIR
    fi

    if [ -e $ISO_DIR/$ISO ]; then
        echo "Using $ISO_DIR/$ISO"
    else
        echo "$ISO_DIR/$ISO Not Found...Fetching $ISO from $MIRROR"
        
        # Check if we already imported the key
        # pub  4096R/C105B9DE 2011-07-03 CentOS-6 Key (CentOS 6 Official Signing Key) <centos-6-key@centos.org>
        #  Key fingerprint = C1DA C52D 1664 E8A4 386D  BA43 0946 FCA2 C105 B9DE
        set +e 
        gpg --list-keys | grep 4096R/C105B9DE > /dev/null
        if [[ $? -gt 0 ]]; then
            echo "Adding gpg signing keys"
            gpg --keyserver pool.sks-keyservers.net --recv-keys C1DAC52D1664E8A4386DBA430946FCA2C105B9DE
        fi
        set -e
    
        echo "Fetching $MIRROR/sha256sum.txt.asc"
        wget -nv -O $ISO_DIR/sha256sum.txt.asc $MIRROR/sha256sum.txt.asc
        
        echo "Fetching $MIRROR/$ISO"
        wget -nv -O $ISO_DIR/$ISO $MIRROR/$ISO
        
        echo "Verifying gpg and sha256: $MIRROR/sha256sum.txt.asc"
        pushd $PWD
        cd $ISO_DIR
        gpg --verify sha256sum.txt.asc
        grep "$ISO\$" sha256sum.txt.asc | sha256sum -c -
        popd
    fi
}

function create_layout() {
    echo "Creating ISO Layout"
    if [ -d $DVD_LAYOUT ]; then
        echo "Layout $DVD_LAYOUT exists...nuking"
        rm -rf $DVD_LAYOUT
    fi
    echo "Creating $DVD_LAYOUT"
    mkdir -p $DVD_LAYOUT

    # Check if $MOUNT_POINT is already mounted
    # This may happen if a previous build failed
    if [ $(grep $MOUNT_POINT /proc/mounts) ]; then
      echo "Unmounting $MOUNT_POINT from previous build..."
        umount $MOUNT_POINT
    fi

    echo "Mounting $ISO to $MOUNT_POINT"
    if [ ! -d $MOUNT_POINT ]; then
        echo "Creating $MOUNT_POINT..."
        mkdir $MOUNT_POINT
    fi
    mount $ISO_DIR/$ISO $MOUNT_POINT -o loop
    pushd $MOUNT_POINT > /dev/null 2>&1
    echo "Populating Layout"
    tar cf - . | tar xpf - -C $DVD_LAYOUT
    popd > /dev/null 2>&1
    umount $MOUNT_POINT


if [ ! -d $CUSTOM_RPMS/ce67-updates ]; then
    for repo_dir in gel-el6-noarch gel-el6-x86_64 el6-ibm
    do
        rsync -arv /var/www/cobbler/repo_mirror/$repo_dir  $CUSTOM_RPMS/
        for adir in drpms cache repodata
        do
          test -d $CUSTOM_RPMS/$repo_dir/$adir && rm -rvf $CUSTOM_RPMS/$repo_dir/$adir
        done
    done
    if [ ! -d $CUSTOM_RPMS/ce67-updates ]; then
      mkdir $CUSTOM_RPMS/ce67-updates
    fi
    cd $CUSTOM_RPMS/ce67-updates/
    echo 'mirror ./ ./' | lftp https://repos.app-sys.jp/pub/Linux/centos/6.7/updates/x86_64/
    for adir in drpms cache repodata
    do
      test -d $CUSTOM_RPMS/ce67-updates/$adir && rm -rvf $CUSTOM_RPMS/ce67-updates/$adir
    done
fi
    find $CUSTOM_RPMS/ce67-updates -type f -name "*java*.rpm" -exec rm -rvf {} \;
    
    if [ -d $CUSTOM_RPMS ]; then
        echo "Copying custom RPMS"
        find $CUSTOM_RPMS -type f -name "*.rpm" -exec cp {} $DVD_LAYOUT/Packages \;
    fi

    echo "Finished Populating Layout"
}

function copy_ks_cfg() {
    echo "Copying Kickstart file"
    cat $KS_BASE_CFG > $KS_CFG
    cat $KS_RESCUE_BASE_CFG > $KS_RESCUE_CFG
    ## copy
    cp -avf $KS_CFG $DVD_LAYOUT/
    test -d $DVD_LAYOUT/isolinux/ks || mkdir -p $DVD_LAYOUT/isolinux/ks
    cp -avf $KS_CFG $DVD_LAYOUT/isolinux/ks/ks.cfg
    cp -avf $KS_RESCUE_CFG $DVD_LAYOUT/isolinux/ks/ks-rescue.cfg
    ## copy: csv, unit.txt
    cp -avf $CSV_FILE        $DVD_LAYOUT/isolinux/ks/
    cp -avf $UNIT_INFO_FILE  $DVD_LAYOUT/isolinux/ks/
}

function copy_guest_tools() {
    echo "Copying sdc-vmtools"
    echo "Initiallizing and fetching submodule $GUESTTOOLS"
    git submodule init
    git submodule update
    cp -R ./$GUESTTOOLS/ $DVD_LAYOUT/
}

function modify_boot_menu() {
    echo "Modifying boot menu"
    cp ./isolinux.cfg $DVD_LAYOUT/isolinux/
}

function cleanup_layout() {
    echo "Cleaning up $DVD_LAYOUT"
    find $DVD_LAYOUT -name TRANS.TBL -exec rm '{}' +
    COMPS_XML=`find $DVD_LAYOUT/repodata -name '*.xml' ! -name 'repomd.xml' -exec basename {} \;`
    mv $DVD_LAYOUT/repodata/$COMPS_XML $DVD_LAYOUT/repodata/comps.xml
    find $DVD_LAYOUT/repodata -type f ! -name 'comps.xml' -exec rm '{}' +
}

function create_newiso() {
    copy_guest_tools
    cleanup_layout
    copy_ks_cfg
    modify_boot_menu
    echo "Preparing NEW ISO"
    pushd $DVD_LAYOUT > /dev/null 2>&1
    discinfo=`head -1 .discinfo`
    createrepo -u "media://$discinfo" -g repodata/comps.xml $DVD_LAYOUT
    echo "Creating NEW ISO"
    mkisofs -r -R -J -T -v \
     -no-emul-boot -boot-load-size 4 -boot-info-table \
     -V "$DVD_TITLE" -p "Joyent" \
     -A "$DVD_TITLE - $CUR_TIME" \
     -b isolinux/isolinux.bin -c isolinux/boot.cat \
     -x "lost+found" -o $ISO_FILENAME $DVD_LAYOUT
    echo "Fixing up NEW ISO"
    echo implantisomd5 $ISO_FILENAME
    implantisomd5 $ISO_FILENAME
    popd > /dev/null 2>&1
    echo "NEW ISO $ISO_FILENAME is ready"
}

function deploy_newiso() {
    TO_ISO_NAME=CentOS-6.7-x86_64-mini-ks-bind-vnxx.iso
    TO_ISO_DIR=/export/vm/iso
    pushd $DVD_LAYOUT/
    mv -vf $ISO_FILENAME $TO_ISO_DIR/$TO_ISO_NAME
    rsync -arv $TO_ISO_DIR/$TO_ISO_NAME /var/lib/tftpboot/images/ce67-64-x86_64-isoboot/$TO_ISO_NAME
    popd
}
# main line

usage()
{
    cat <<EOF
Usage:
        $0 [options] command [command]
option:
        -h                    - this usage

Commands:
        fetch                 - fetch ISO
        layout                - create layout for new ISO
        finish                - create the new ISO
        deploy                - deploy new ISO

EOF
    exit 1
}

args=`getopt -o h -n 'build_centos_iso.sh' -- "$@"`

if [[ $# == 0 ]]; then
    usage;
fi

eval set -- $args

while true ; do
   case "$1" in
       -h)
            usage;
            break;;
       --)
           shift; break;;
   esac
done

for arg ; do
    #if [ $arg = 'fetch' ] ; then
    #    fetch_iso
    #fi
    if [ $arg = 'layout' ] ; then
        create_layout
    fi
    if [ $arg = 'finish' ] ; then
        create_newiso
    fi
    if [ $arg = 'deploy' ] ; then
        deploy_newiso
    fi
done
