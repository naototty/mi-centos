# Rescue Boot Template

cdrom

# Set the language and language support
lang en_US
##langsupport en_US

# Set the keyboard
keyboard "us"

rescue

firewall --service=ssh

## ssh login for kickstart installl(one-time)
sshpw --username=gmosystem ev82b48v --plaintext

repo --name="CentOS" --cost=100  --baseurl=cdrom:sr0

# Network kickstart
#network --bootproto dhcp
network --onboot=off --device=eth0 --noipv4 --noipv6
network --onboot=off --device=eth1 --noipv4 --noipv6
network --onboot=off --device=eth2 --noipv4 --noipv6
network --onboot=off --device=eth3 --noipv4 --noipv6

#network --bootproto=static --ip=172.20.153.44 --netmask=255.255.248.0 --nameserver=10.110.55.250 --hostname=vm1d0144.apyz.internal-gmo --device=eth1 --onboot=on
#network --bootproto=dhcp --hostname=vm1d0144.apyz.internal-gmo --device=eth0 --onboot=on

#network --bootproto=static --device=eth2 --onboot=off
#network --bootproto=static --device=eth3 --onboot=off


# Rescue method (only NFS/FTP/HTTP currently supported)
#url --url=$tree



## ============================================================
## %%pre : pre-install configuration
%pre
#!/bin/bash
export LC_ALL=C
export LANG=C
set -x -v
exec 1>/tmp/ks-pre.log 2>&1

# Once root's homedir is there, copy over the log.
while : ; do
    sleep 10
    if [ -d /mnt/sysimage/root ]; then
        cp /tmp/ks-pre.log /mnt/sysimage/root/
        logger "Copied %pre section log to system"
        break
    fi
done &

OS_NIC1=eth2
OS_NIC2=eth3
OS_NIC3=eth0
OS_NIC4=eth1
cat > /root/NIC_INFO_LIST << __EOF_NIC_INFO
nic1|eth2|90:e2:ba:09:77:8a
nic2|eth3|90:e2:ba:09:77:8a
__EOF_NIC_INFO
## clean
ip link set dev eth0 down
ip link set dev eth1 down
ip link set dev eth2 down
ip link set dev eth3 down
cat > /etc/udev/rules.d/70-persistent-net.rules << __UDEV
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x8086:0x1516 (igb)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="90:e2:ba:09:77:8a", ATTR{type}=="1", KERNEL=="eth*", NAME="eth2"

# PCI device 0x8086:0x1516 (igb)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="90:e2:ba:09:77:8b", ATTR{type}=="1", KERNEL=="eth*", NAME="eth3"

# PCI device 0x8086:0x10d3 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="5c:f3:fc:f1:9a:37", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

# PCI device 0x8086:0x10d3 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="5c:f3:fc:f1:9a:38", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
__UDEV

mkdir -p /etc/sysconfig/network-scripts

#####################################
## ifconfig eth2 | grep HW | awk '{print "#"$5}' > /etc/sysconfig/network-scripts/ifcfg-eth2
## ifconfig eth3 | grep HW | awk '{print "#"$5}' > /etc/sysconfig/network-scripts/ifcfg-eth3

# ip addr show dev eth2 | grep "link/ether" | awk '{print "#"$2}' > /etc/sysconfig/network-scripts/ifcfg-eth2
# ip addr show dev eth3 | grep "link/ether" | awk '{print "#"$2}' > /etc/sysconfig/network-scripts/ifcfg-eth3

## IMM shared Manage : eth2
ETH="eth2"
MACADDR=$( ip addr show dev ${ETH} | grep "link/ether" | awk '{print $2}' )
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
ip addr show dev ${ETH} | grep "link/ether" | awk '{print "#"$2}' > ${INF}
#
cat >> $INF << __EOF
DEVICE="${ETH}"
HWADDR="${MACADDR}"
NM_CONTROLLED=no
USERCTL=no
ONBOOT=yes
BOOTPROTO=static
IPADDR=10.110.55.250
NETMASK=255.255.248.0
__EOF

## none : eth3
ETH="eth3"
MACADDR=$( ip addr show dev ${ETH} | grep "link/ether" | awk '{print $2}' )
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
ip addr show dev ${ETH} | grep "link/ether" | awk '{print "#"$2}' > ${INF}
#
cat >> $INF << __EOF
DEVICE="${ETH}"
HWADDR="${MACADDR}"
ONBOOT=no
USERCTL=no
NM_CONTROLLED=no
BOOTPROTO=static
__EOF


## PCI NIC-1 : eth0
ETH="eth0"
MACADDR=$( ip addr show dev ${ETH} | grep "link/ether" | awk '{print $2}' )
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
ip addr show dev ${ETH} | grep "link/ether" | awk '{print "#"$2}' > ${INF}
#
cat >> $INF << __EOF
DEVICE="${ETH}"
HWADDR="${MACADDR}"
NM_CONTROLLED="no"
ONBOOT="no"
BOOTPROTO=none
MASTER=bond0
SLAVE=yes
USERCTL=no
__EOF

## PCI NIC-1 : eth1
ETH="eth1"
MACADDR=$( ip addr show dev ${ETH} | grep "link/ether" | awk '{print $2}' )
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
ip addr show dev ${ETH} | grep "link/ether" | awk '{print "#"$2}' > ${INF}
#
cat >> $INF << __EOF
DEVICE="${ETH}"
HWADDR="${MACADDR}"
NM_CONTROLLED="no"
ONBOOT="no"
BOOTPROTO=none
MASTER=bond0
SLAVE=yes
USERCTL=no
__EOF

ETH="bond0"
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
cat > $INF << __EOF
DEVICE=${ETH}
BOOTPROTO=none
USERCTL=no
NM_CONTROLLED=no
BONDING_OPTS="mode=4 miimon=100 lacp_rate=fast xmit_hash_policy=layer3+4"
ONBOOT=yes
__EOF

VLAN="202"
ETH="bond0.202"
BRIDGE="br0.202"
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
cat > $INF << __EOF
DEVICE=${ETH}
BOOTPROTO=none
USERCTL=no
NM_CONTROLLED=no
ONBOOT=yes
VLAN=yes
HOTPLUG=no
BRIDGE=${BRIDGE}
__EOF

VLAN="202"
ETH="br0.202"
INF=/etc/sysconfig/network-scripts/ifcfg-${ETH}
cat > $INF << __EOF
DEVICE=${ETH}
BOOTPROTO=static
IPADDR=10.0.2.246
NETMASK=255.255.255.0
USERCTL=no
NM_CONTROLLED=no
ONBOOT=yes
HOTPLUG=no
NOZEROCONF=yes
__EOF


cat > /etc/modprobe.d/bonding.conf << __EOF
alias bond0 bonding
__EOF

modprobe bonding
modprobe cdc_ether
#####################################


## ## G-Gee common Manage : 10.0.2.0/24(VLAN:202,HSRP-ID:102)
## #ip link add link eth2 name eth2.202 type vlan id 202
## ip link add link ${OS_NIC4} name ${OS_NIC4}.202 type vlan id 202
## #ip addr add 10.0.2.246/24 brd 10.0.2.255 dev eth2.202
## ip addr add 10.0.2.246/24 brd 10.0.2.255 dev ${OS_NIC4}.202
## #ip link set dev eth2.202 up
## ip link set dev ${OS_NIC4}.202 up
## ip link show

## G-Gee common Manage : 10.0.2.0/24(VLAN:202,HSRP-ID:102)
## #ip link add link eth2 name eth2.202 type vlan id 202
## ip link add link ${OS_NIC4} name ${OS_NIC4}.202 type vlan id 202
## #ip addr add 10.0.2.246/24 brd 10.0.2.255 dev eth2.202
## ip addr add 10.0.2.246/24 brd 10.0.2.255 dev ${OS_NIC4}.202
## #ip link set dev eth2.202 up
## ip link set dev ${OS_NIC4}.202 up
## ip link show

## IMM-Manage (x3250m3 cobbler only)
#ip addr add 172.19.13.253/24 brd 172.19.13.255 dev eth0
ip addr add 172.19.13.253/24 brd 172.19.13.255 dev ${OS_NIC1}
#ip link set dev eth0 up
ip link set dev ${OS_NIC1} up
ip link show

## POST_UP='ip route add 10.0.1.0/24 dev eth1'
## PRE_DOWN='ip route del 10.0.1.0/24 dev eth1'
ip route add default via 172.19.13.1
ip route show
## mount
mkdir -p /mnt/sysimage/iso
mount /dev/sr0 /mnt/sysimage/iso
%end
## ============================================================
 
